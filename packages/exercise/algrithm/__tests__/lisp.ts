/**
 * (div 10 add(2 3))
 * (add (sub (div 8 2 ) (mul 1 9 ) ) 20)
 */
import {evaluate} from '../src/lisp/lisp-use-stack'
// console.log(evaluate('(div 10 add(2 3))'))
// console.log(evaluate('(add (sub (div 8 2) (mul 1 9)) 20)'))
describe('lisp generated by stack', () => {
  it('non-standard grammar (div 10 add(2 3))', () => {
    const ret = evaluate('(div 10 add(2 3))')
    expect(ret).toEqual(2)
  })

  it('(add (sub (div 8 2) (mul 1 9)) 20)', () => {
    const ret = evaluate('(add (sub (div 8 2) (mul 1 9)) 20)')
    expect(ret).toEqual(15)
  })
  it('(add 1 2 3)', () => {
    const ret = evaluate('(add 1 2 3)')
    expect(ret).toEqual(6)
  })

  it('(mul 3 -7)', () => {
    const ret = evaluate('(mul 3 -7)')
    expect(ret).toEqual(-21)
  })

  it('(sub (mul 2 4) (div 9 3))', () => {
    const ret = evaluate('(sub (mul 2 4) (div 9 3))')
    expect(ret).toEqual(5)
  })

  it('(div 1 0)', () => {
    const ret = evaluate('(div 1 0)')
    expect(ret).toEqual('error')
  })
})
